"use strict";(self.webpackChunkgarden=self.webpackChunkgarden||[]).push([[6460],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=s(n),m=r,k=h["".concat(c,".").concat(m)]||h[m]||u[m]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1826:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},o="Blockchain",l={unversionedId:"crypto/blockchain/blockchain",id:"crypto/blockchain/blockchain",title:"Blockchain",description:"What is a blockchain?",source:"@site/docs/crypto/blockchain/blockchain.md",sourceDirName:"crypto/blockchain",slug:"/crypto/blockchain/",permalink:"/docs/crypto/blockchain/",draft:!1,editUrl:"https://github.com/0xfinder/0xfinder.github.io/docs/crypto/blockchain/blockchain.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Crypto",permalink:"/docs/crypto/"},next:{title:"Cryptocurrencies",permalink:"/docs/crypto/cryptocurrencies/"}},c={},s=[{value:"What is a blockchain?",id:"what-is-a-blockchain",level:3}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blockchain"},"Blockchain"),(0,r.kt)("h3",{id:"what-is-a-blockchain"},(0,r.kt)("a",{parentName:"h3",href:"https://www.coinbase.com/learn/crypto-basics/what-is-a-blockchain"},"What is a blockchain?")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"list of transactions that anyone can view and verify (distributed & immutable ledger)"),(0,r.kt)("li",{parentName:"ul"},"removes the need for a centralized entity"),(0,r.kt)("li",{parentName:"ul"},"secured via blockchain networks"),(0,r.kt)("li",{parentName:"ul"},"advantages: global, private, open"),(0,r.kt)("li",{parentName:"ul"},"secured by large peer-to-peer network of computers running foss"),(0,r.kt)("li",{parentName:"ul"},"addresses made up of public key and private key"),(0,r.kt)("li",{parentName:"ul"},"sending money requires signing a transaction with priv key")),(0,r.kt)("p",null,"blocks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"magic number - some sort of identifier")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"blocksize - size limit of block")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"block header - information about the block")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"transaction counter - number of transactions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"transactions - list of transactions in a block")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"block header"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"version - crypto version"),(0,r.kt)("li",{parentName:"ul"},"previous block hash - hash of the previous block header (ensures nothing has been tampered with)"),(0,r.kt)("li",{parentName:"ul"},"hash merkle root - hash of transactions in merkle tree of current block"),(0,r.kt)("li",{parentName:"ul"},"time - timestamp to place block"),(0,r.kt)("li",{parentName:"ul"},"bits - difficulty rating of the target hash aka how hard it is to solve the nonce"),(0,r.kt)("li",{parentName:"ul"},"nonce - encryped number that miner has to solve to verify block")))),(0,r.kt)("p",null,"consensus mechanisms"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"pow"),(0,r.kt)("li",{parentName:"ul"},"pos")),(0,r.kt)("p",null,"hashing: mathematical function that converts an input of arbitrary length into an encrypted output of a fixed length // unique hash will always be the same size // hash functions are also one way (cant be reverse engineered) // deterministic(?) - the same hash will produce the same output for the same input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"solving hash starts w data in the block header"),(0,r.kt)("li",{parentName:"ul"},"miner focuses on nonce - appended to hashed contents of prev block, then hashed"),(0,r.kt)("li",{parentName:"ul"},"when new hash <= target hash then accepted as solution -> reward given -> block added"),(0,r.kt)("li",{parentName:"ul"},"bitcoin uses sha-256"),(0,r.kt)("li",{parentName:"ul"},"target hash starts with long string of zeroes"),(0,r.kt)("li",{parentName:"ul"},"miners generate a hash below target by altering the input by adding an integer (nonce)"),(0,r.kt)("li",{parentName:"ul"},"valid hash found -> broadcast to network")),(0,r.kt)("p",null,"cryptographic hash functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"collision-free - no two input hashes map to the same output hash"),(0,r.kt)("li",{parentName:"ul"},"hidden - difficult to guess input value for hash fx from output"),(0,r.kt)("li",{parentName:"ul"},"puzzle friendly - selection of input from wide distribution")),(0,r.kt)("p",null,"prevention of double spending"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"overcome by maintaining a common, universal ledger system"),(0,r.kt)("li",{parentName:"ul"},"recognized as invalid by confirmation process(?)"),(0,r.kt)("li",{parentName:"ul"},"if both transactions are pulled from the pool simultaneously, the transcation with highest no. of confirmations will be included in the blockchain and the other will be discarded"),(0,r.kt)("li",{parentName:"ul"},"some issues: assumption of invalid tx(?) some people wait for at least 6 confirmations before safely assuming the tx is valid"),(0,r.kt)("li",{parentName:"ul"},"51% attack - reverse the blockchain and create a separate blockchai")),(0,r.kt)("p",null,"51% attacks"))}u.isMDXComponent=!0}}]);